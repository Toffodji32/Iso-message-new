{% extends 'base.html.twig' %}

{% block title %}Groupes de Contacts - IsoMessage{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        th.actions-header {
            text-align: right;
        }
        td.actions-cell {
            text-align: right;
        }
        td.actions-cell .btn {
            margin-left: 5px;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="tabs">
        <h6>GROUPE DE CONTACTS</h6>
    </div>

    <div class="controls mb-3 d-flex justify-content-end">
        <button id="add-group-btn" class="btn btn-primary">+ Ajouter un groupe</button>
    </div>

    <div class="table-container">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Nom du Groupe</th>
                    <th class="actions-header">Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for group in contact_groups %}
                    <tr>
                        <td>{{ group.name }}</td>
                        <td class="actions-cell">
                            <button class="btn btn-warning btn-sm edit-group-btn"
                                    data-url="{{ path('app_contact_group_edit', {id: group.id}) }}"
                                    title="Modifier">
                                <i class="fas fa-edit"></i> 
                            </button>

                            <form method="post"
                                  action="{{ path('app_contact_group_delete', {id: group.id}) }}"
                                  onsubmit="return confirm('Supprimer ce groupe ?');"
                                  style="display: inline-block;">
                                <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ group.id) }}">
                                <button class="btn btn-danger btn-sm" title="Supprimer">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </form>
                        </td>
                    </tr>
                {% else %}
                    <tr>
                        <td colspan="2" class="text-center">Aucun groupe de contacts trouvé.</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    {# MODALE Bootstrap pour formulaire AJAX #}
    <div class="modal fade" id="groupModal" tabindex="-1" aria-labelledby="groupModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content" id="modal-content">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                <!-- Le contenu AJAX du formulaire sera injecté ici -->
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    {# CDN Bootstrap JS (si déjà inclus dans base.html.twig, tu peux supprimer cette ligne) #}
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+AM1lF0nFD9SwkQ1hTQtAt96tA5+T"
            crossorigin="anonymous"></script>

    <script>
document.addEventListener('DOMContentLoaded', function () {
    const addButton = document.getElementById('add-group-btn');
    const modalContent = document.getElementById('modal-content');
    const modalElement = document.getElementById('groupModal');
    const modal = new bootstrap.Modal(modalElement);

    function loadForm(url) {
        fetch(url, {
            headers: { 'X-Requested-With': 'XMLHttpRequest' }
        })
        .then(response => {
            if (!response.ok) throw new Error(`Erreur ${response.status}`);
            return response.text();
        })
        .then(html => {
            modalContent.innerHTML = html;
            modal.show();

            // Ajouter gestion du submit du formulaire après chargement du HTML
            bindFormSubmission();
        })
        .catch(error => {
            console.error("Erreur lors du chargement du formulaire :", error);
            alert("Une erreur est survenue lors de l’ouverture du formulaire.");
        });
    }

    function bindFormSubmission() {
        const form = document.getElementById('contact-group-form');
        if (!form) return;

        form.addEventListener('submit', function (e) {
            e.preventDefault();

            const url = form.action;
            const formData = new FormData(form);

            fetch(url, {
                method: 'POST',
                body: formData,
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Fermer la modale et recharger la page ou mettre à jour dynamiquement
                    modal.hide();
                    window.location.reload(); // ou recharge partielle
                } else if (data.form) {
                    modalContent.innerHTML = data.form;
                    bindFormSubmission(); // re-bind car le DOM a été remplacé
                }
            })
            .catch(error => {
                console.error('Erreur lors de la soumission du formulaire :', error);
                alert("Une erreur est survenue lors de l’envoi du formulaire.");
            });
        });
    }

    // Bouton "Ajouter un groupe"
    if (addButton) {
        addButton.addEventListener('click', () => loadForm('/contact_group/new'));
    }

    // Boutons "Modifier"
    document.querySelectorAll('.edit-group-btn').forEach(button => {
        button.addEventListener('click', () => {
            const url = button.dataset.url;
            if (url) loadForm(url);
        });
    });
});
</script>

{% endblock %}
